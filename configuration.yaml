
# Configure a default setup of Home Assistant (frontend, api, etc)
default_config:
ios:
# Database
recorder:
  purge_keep_days: 3
  
# Uncomment this if you are using SSL/TLS, running in Docker container, etc.
http:
  base_url: https://hab11.com
  ssl_certificate: /ssl/fullchain.pem
  ssl_key: /ssl/privkey.pem
  
mqtt:
  broker: core-mosquitto
  username: homeassistant
  password: fei8aivu6aFey8iizoh3owide5fo7wo8nah0Aiyau3aiy9dijieC3giequoz0shi
  discovery: True
  
# Text to speech
tts:
  - platform: google_translate
  
upnp:
  local_ip: 192.168.1.100
  
group: !include groups.yaml
automation: !include automations.yaml
script: !include scripts.yaml
scene: !include scenes.yaml
device_tracker:
  - platform: huawei_router
    host: 192.168.1.1
    username: vodafone
    password: !secret router
  - platform: bluetooth_tracker
  - platform: bluetooth_le_tracker

browser_mod:

lovelace:
    mode: yaml
    
#frontend: !include themes.yaml

google_assistant:
  project_id: home-assistant-277315
  service_account: !include Home Assistant-b640ced71d95.json
  report_state: true
  exposed_domains:
    - switch
    - light

sonoff:
  username: graeme@ibconsult.co.uk
  password: !secret sonoff
  #reload: always
  
vacuum:
  - platform: xiaomi_miio
    host: 192.168.1.73
    token: 574e7848396438314767766e41527968
    name: Roborock S5 Max
  
  
####################################################################################### 
## Roborock Map
#######################################################################################  

# camera:
#   - platform: xiaomi_cloud_map_extractor
#     host: 192.168.1.73
#     token: 574e7848396438314767766e41527968
#     username: !secret xiaomi_user
#     password: !secret xiaomi_pass
#     country: "de"
#     colors:
#       color_map_inside: [0, 0, 0]
#       color_map_outside: [0, 0, 0]
#       color_map_wall: [0, 0, 0]
#       color_map_wall_v2: [0, 0, 0]
#       color_grey_wall: [0, 0, 0]
#       color_path: [255, 255, 255]
#       color_goto_path: [255, 255, 0]
#       color_predicted_path: [255, 255, 0, 0.5]
#       color_zones: [0xAD, 0xD8, 0xFF, 0x8F]
#       color_zones_outline: [0xAD, 0xD8, 0xFF]
#       color_virtual_walls: [255, 0, 0]
#       color_no_go_zones: [255, 33, 55, 0.6]
#       color_no_go_zones_outline: [255, 0, 0]
#       color_no_mop_zones: [163, 130, 211, 0.6]
#       color_no_mop_zones_outline: [0, 200, 255]
#       color_charger: [255, 255, 255, 0.6]
#       color_robo: [255, 255, 255]
#       color_unknown: [0, 0, 0]
#       color_scan: [0, 0, 0]
#     room_colors:
#       1: [0, 0, 0]
#       2: [0, 0, 0]
#       3: [0, 0, 0]
#       4: [0, 0, 0]
#       5: [0, 0, 0]
#       6: [0, 0, 0]
#       7: [0, 0, 0]
#       8: [0, 0, 0]
#       9: [0, 0, 0]
#       10: [0, 0, 0]
#       11: [0, 0, 0]
#       12: [0, 0, 0]
#       13: [0, 0, 0]
#       14: [0, 0, 0]
#       15: [0, 0, 0]
#       16: [0, 0, 0]
#       17: [0, 0, 0]
#       18: [0, 0, 0]
#       19: [0, 0, 0]
#       20: [0, 0, 0]
#       21: [0, 0, 0]
#       22: [0, 0, 0]
#       23: [0, 0, 0]
#     draw:
#       - path
#       - goto_path
#       - no_go_zones
#       - no_mopping_zones
#       - vacuum_position
#       - virtual_walls
#       - zones
#     map_transformation:
#       scale: 5
#     attributes:
#       - image
#       - no_go_areas
#       - no_mopping_areas
#       - vacuum_position
#       - zones

####################################################################################### 
## Templates (Used for updating text in the UI and converting sensors to CSS values )
#######################################################################################  
sensor:

  - platform: time_date
    display_options:
      - 'time'
      - 'date'
      - 'date_time'
      - 'date_time_utc'
      - 'date_time_iso'
      - 'time_date'
      - 'time_utc'
      - 'beat'
      
  - platform: random
    name: 'tv_colour'
    scan_interval: 60
    maximum: 360
    minimum: 0      
      
      
  - platform: template
    sensors:  
      ## Converts time and date into sentence for UI     
      day:
        entity_id: sensor.date
        value_template: >
          {% set days = ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"] %}
          {{ days[now().weekday()] }}
      month:
        value_template: >
          {% set months = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"] %}
          {{ strptime(states('sensor.date'), '%Y-%m-%d').day }}
          {{ months[now().month-1] }} 
          
      date_string:
        friendly_name: "Full Date"
        value_template: "{{ states('sensor.day') }}, {{ states('sensor.month') }} {{ now().year }}"  
        
      ambient_light_calc:
        friendly_name: 'Calculated Ambient Light'
        value_template: '{{ ((18 + states.sun.sun.attributes.elevation | float ) * (1 - ((states.sensor.weather_cloudiness.state | float / 150)))) |float|round(1) }}'

      brightness:
        friendly_name: 'Ambient plus offset'
        value_template: '{{((states.sensor.lux.state | float) / 15) + (states.input_number.daylight_tester.state | float)}}'
    
    #   brightness:
    #     friendly_name: 'Ambient plus offset'
    #     value_template: '{{((states.sensor.ambient_light_calc.state | float) / 2) + (states.input_number.daylight_tester.state | float)}}'

      living_room_brightness:
        friendly_name: 'Living room brightness'
        value_template: '{{(states.sensor.brightness.state | float) * (states.cover.sonoff_1000d67323.attributes.current_position | float / 100) |float|round(1)}}'
     
      bedroom_brightness:
        friendly_name: 'Bedroom brightness'
        value_template: '{{(states.sensor.brightness.state | float) * (states.cover.sonoff_1000d66ac3.attributes.current_position | float / 100) |float|round(1)}}'     
 
      kitchen_brightness:
        friendly_name: 'Kitchen brightness'
        value_template: '{{(states.sensor.brightness.state | float) * (states.cover.sonoff_1000d66886.attributes.current_position | float / 100) |float|round(1)}}'

      living_room_position:
        value_template: '{{states.cover.sonoff_1000d67323.attributes.current_position | float|round(0)}}'
        
      bedroom_position:
        value_template: '{{states.cover.sonoff_1000d66ac3.attributes.current_position | float|round(0)}}'        
        
      kitchen_position:
        value_template: '{{states.cover.sonoff_1000d66886.attributes.current_position | float|round(0)}}'        
        
      outdoor_sleep_duration:
        value_template: '{{states.input_number.outdoor_sleep_duration.state}}'
        
      outdoor_wake_duration:
        value_template: '{{states.input_number.outdoor_wake_duration_seconds.state}}'
        
        
## Vacuum
      roborock_s5_max_battery:
        friendly_name: 'Vacuum Battery'
        value_template: "{{state_attr('vacuum.roborock_s5_max', 'battery_level')}}"
        unit_of_measurement: '%'
        device_class: battery
    
      roborock_s5_max_lifetime_cleaned_area:
        friendly_name: 'Lifetime Cleaned Area'
        value_template: "{{state_attr('vacuum.roborock_s5_max', 'total_cleaned_area')}}"
        unit_of_measurement: „é°
    
      roborock_s5_max_lifetime_cleaning_time:
        friendly_name: 'Lifetime Cleaning Time'
        value_template: "{{(state_attr('vacuum.roborock_s5_max', 'total_cleaning_time') / 60)|round(1, 'floor')}}"
    
        # NOTE: This date is converted to be timezone aware so that it plays nice
        # with some other templating functions and filters.
      roborock_s5_max_last_cleaned:
        friendly_name: Relative time since last cleaning ended
        value_template: "{{relative_time(strptime(as_timestamp(state_attr('vacuum.roborock_s5_max', 'clean_stop'))|timestamp_custom('%Y-%m-%d %H:%M:%S%z'), '%Y-%m-%d %H:%M:%S%z'))}}"
    
      roborock_s5_max_lifetime_cleaning_count:
        friendly_name: 'Lifetime Cleaning Count'
        value_template: "{{state_attr('vacuum.roborock_s5_max', 'cleaning_count')}}"
        
        
    # Used for the Filter maintenance card
      roborock_s5_max_filter_remaining:
        friendly_name: '% Filter Remaining'
        unit_of_measurement: '%'
        value_template: "{{((state_attr('vacuum.roborock_s5_max', 'filter_left') / 150) * 100) | round | int}}"

    # Used for the Filter maintenance card
      roborock_s5_max_filter_hrs_remaining:
        friendly_name: 'Filter Remaining Hours'
        unit_of_measurement: 'hrs'
        value_template: "{{state_attr('vacuum.roborock_s5_max', 'filter_left')}}"

   # Used for the Side Brush maintenance card
      roborock_s5_max_side_brush_remaining:
        friendly_name: '% Side Brush Remaining'
        unit_of_measurement: '%'
        value_template: "{{((state_attr('vacuum.roborock_s5_max', 'side_brush_left') / 200) * 100) | round | int}}"

    # Used for the Side Brush maintenance card
      roborock_s5_max_side_brush_hrs_remaining:
        friendly_name: 'Side Brush Remaining Hours'
        unit_of_measurement: 'hrs'
        value_template: "{{state_attr('vacuum.roborock_s5_max', 'side_brush_left')}}"

    # Used for the Main Brush maintenance card
      roborock_s5_max_main_brush_remaining:
        friendly_name: '% Main Brush Remaining'
        unit_of_measurement: '%'
        value_template: "{{((state_attr('vacuum.roborock_s5_max', 'main_brush_left') / 300) * 100) | round | int}}"

    # Used for the Main Brush maintenance card
      roborock_s5_max_main_brush_hrs_remaining:
        friendly_name: 'Main Brush Remaining Hours'
        unit_of_measurement: 'hrs'
        value_template: "{{state_attr('vacuum.roborock_s5_max', 'main_brush_left')}}"

    # Used for the Sensors maintenance card
      roborock_s5_max_sensors_remaining:
        friendly_name: '% Sensors Remaining'
        unit_of_measurement: '%'
        value_template: "{{((state_attr('vacuum.roborock_s5_max', 'sensor_dirty_left') / 30) * 100) | round | int}}"

    # Used for the Sensors maintenance card
      roborock_s5_max_sensors_hrs_remaining:
        friendly_name: 'Sensors Remaining Hours'
        unit_of_measurement: 'hrs'
        value_template: "{{state_attr('vacuum.roborock_s5_max', 'sensor_dirty_left')}}"
        
## Weather




weather:
  - platform: ipma
    name: Weather
    latitude: 41.182192
    longitude: -8.625669


binary_sensor:
  - platform: workday
    country: PT   

  - platform: tod
    name: Night
    after: sunset
    before: sunrise    

input_number:
  nightime:
    name: Nightime value
    initial: 0
    min: 0
    max: 1
    step: 1
    mode: box

  wake_percent:
    name: Open Percentage
    min: 0
    max: 100
    step: 1
    
  range_high:
    name: High Limit
    initial: 8.0
    min: 0
    max: 30
    
  range_low:
    name: High Limit
    initial: 4.0
    min: 0
    max: 30
####################################################################################### 
## DUMMY DEVICES
#######################################################################################
  daylight_tester:
    name: brightness
    initial: 0
    min: -100
    max: 100
    step: 1
    
    
input_boolean:
  blinds_primed:
    name: Blinds Primed
    
######################################################################################
## WAKE UP
######################################################################################

  monday_wake:
    name: 'Monday'
   
  tuesday_wake:
    name: 'Tuesday'
      
  wednesday_wake:
    name: 'Wednesday'
    
  thursday_wake:
    name: 'Thursday'
    
  friday_wake:
    name: 'Friday'
    
  saturday_wake:
    name: 'Saturday'
    
  sunday_wake:
    name: 'Sunday'
    
input_datetime:
  monday_time:
    name: 'Monday'
    has_date: false
    has_time: true
    
  tuesday_time:
    name: 'Tuesday'
    has_date: false
    has_time: true
    
  wednesday_time:
    name: 'Wednesday'
    has_date: false
    has_time: true
    
  thursday_time:
    name: 'Thursday'
    has_date: false
    has_time: true
    
  friday_time:
    name: 'Friday'
    has_date: false
    has_time: true
    
  saturday_time:
    name: 'Saturday'
    has_date: false
    has_time: true
    
  sunday_time:
    name: 'Sunday'
    has_date: false
    has_time: true
    
input_select:
  vacuum_room_select:
    name: Choose a room to clean
    options:
      - Bathroom
      - Bedroom
      - Hallway
      - Kitchen
      - Living Room

  vacuum_room_repeat:
    name: Number of times to clean the room
    options:
      - 1
      - 2
      - 3
    initial: 1
    icon: mdi:numeric

